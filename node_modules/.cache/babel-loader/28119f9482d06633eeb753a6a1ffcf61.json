{"ast":null,"code":"var _jsxFileName = \"D:\\\\weather_widget\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; //import WeatherForecast from './WeatherForecast.js';\n\nimport WeatherWidget from './weather_app_component/weatheWidget.js';\nconst key = 'cdc11e06be4ca20a5d82b9327816fbe2';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async () => {\n      const weatherapi = await fetch('https://api.openweathermap.org/data/2.5/weather?q=Ahmedabad,in&APPID=' + key + '&units=metric');\n      const response = await weatherapi.json();\n      console.log(response);\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        icon: undefined,\n        main: response.main,\n        celsius: response.main.temp,\n        maxtemp: response.main.temp_max,\n        mintemp: response.main.temp_min,\n        desc: response.weather[0].main\n      });\n      this.getWeatherIcon(this.weathericon, response.weather[0].id);\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      maxtemp: undefined,\n      mintemp: undefined,\n      desc: undefined,\n      weathericon: undefined\n    };\n    this.refreshDispBoard();\n    this.weathericon = {\n      \"Thunderstorm\": \"wi-thunderstorm\",\n      \"Drizzle\": \"wi-sleet\",\n      \"Rain\": \"wi-storm-showers\",\n      \"Snow\": \"wi-snow\",\n      \"Atmosphere\": \"wi-fog\",\n      \"Clear\": \"wi-day-sunny\",\n      \"Clouds\": \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  refreshBoard() {\n    this.timer = setInterval(() => this.getWeather(), 300000); //Refresh temperature in every 5 min\n  }\n\n  getWeatherIcon(icon, range) {\n    switch (true) {\n      case range >= 200 && range <= 232:\n        this.setState({\n          icon: this.weathericon.Thunderstorm\n        });\n        break;\n\n      case range >= 300 && range <= 321:\n        this.setState({\n          icon: this.weathericon.Drizzle\n        });\n        break;\n\n      case range >= 500 && range <= 531:\n        this.setState({\n          icon: this.weathericon.Rain\n        });\n        break;\n\n      case range >= 600 && range <= 622:\n        this.setState({\n          icon: this.weathericon.Snow\n        });\n        break;\n\n      case range >= 701 && range <= 781:\n        this.setState({\n          icon: this.weathericon.Atmosphere\n        });\n        break;\n\n      case range === 800:\n        this.setState({\n          icon: this.weathericon.Clear\n        });\n        break;\n\n      case range >= 801 && range <= 804:\n        this.setState({\n          icon: this.weathericon.Clear\n        });\n        break;\n    }\n  }\n  /**Function to get the temperature from API */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WeatherWidget, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      maxtemp: this.state.maxtemp,\n      mintemp: this.state.mintemp,\n      desc: this.state.desc,\n      weathericon: this.state.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/weather_widget/src/App.js"],"names":["React","WeatherWidget","key","App","Component","constructor","getWeather","weatherapi","fetch","response","json","console","log","setState","city","name","country","sys","icon","undefined","main","celsius","temp","maxtemp","temp_max","mintemp","temp_min","desc","weather","getWeatherIcon","weathericon","id","state","refreshDispBoard","calCelsius","cel","Math","floor","refreshBoard","timer","setInterval","range","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import WeatherForecast from './WeatherForecast.js';\nimport WeatherWidget from './weather_app_component/weatheWidget.js';\n\nconst key = 'cdc11e06be4ca20a5d82b9327816fbe2';\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius:undefined,\n      maxtemp:undefined,\n      mintemp:undefined,\n      desc:undefined,\n      weathericon:undefined,\n\n    };\n\n  \n    this.refreshDispBoard();\n    \n    \n    this.weathericon = {\n      \"Thunderstorm\": \"wi-thunderstorm\",\n      \"Drizzle\": \"wi-sleet\",\n      \"Rain\":\"wi-storm-showers\",\n      \"Snow\":\"wi-snow\",\n      \"Atmosphere\":\"wi-fog\",\n      \"Clear\":\"wi-day-sunny\",\n      \"Clouds\":\"wi-day-fog\"\n\n    };\n\n  \n  }\n\ncalCelsius(temp){\n  let cel = Math.floor(temp-273.15);\n  return cel;\n}\n\nrefreshBoard(){\n  this.timer = setInterval(()=> this.getWeather(), 300000)  //Refresh temperature in every 5 min\n }\n\n\ngetWeatherIcon(icon,range){\n  switch(true){\n    case range>=200 && range <= 232:\n        this.setState({icon:this.weathericon.Thunderstorm})\n        break;\n    case range>=300 && range <= 321:\n      this.setState({icon:this.weathericon.Drizzle})\n      break;\n    case range>=500 && range <= 531:\n      this.setState({icon:this.weathericon.Rain})\n      break;\n    case range>=600 && range <= 622:\n      this.setState({icon:this.weathericon.Snow})\n      break;\n    case range>=701 && range <= 781:\n      this.setState({icon:this.weathericon.Atmosphere})\n    break;\n    case range === 800:\n      this.setState({icon:this.weathericon.Clear})\n    break;\n    case range>=801 && range <= 804:\n      this.setState({icon:this.weathericon.Clear})\n    break;\n  }\n\n}\n\n\n/**Function to get the temperature from API */\n  getWeather = async() =>{\n    const weatherapi = await fetch('https://api.openweathermap.org/data/2.5/weather?q=Ahmedabad,in&APPID=' +key+ '&units=metric')\n    const response = await weatherapi.json();\n    console.log(response);\n\n    this.setState({\n      city : response.name,\n      country : response.sys.country,\n      icon: undefined,\n      main: response.main,\n      celsius:response.main.temp,\n      maxtemp:response.main.temp_max,\n      mintemp:response.main.temp_min,\n      desc:response.weather[0].main,\n    })\n\n     this.getWeatherIcon(this.weathericon,response.weather[0].id);\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <WeatherWidget\n         city={this.state.city} \n         country={this.state.country}\n         temp_celsius={this.state.celsius}\n         maxtemp = {this.state.maxtemp}\n         mintemp = {this.state.mintemp}\n         desc= {this.state.desc}\n         weathericon = {this.state.icon}\n         ></WeatherWidget>\n      </header>\n    </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}